name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main # 或者你的主要分支名稱
  workflow_dispatch: # 允許手動觸發

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 指定你專案使用的 Python 版本

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # 注意：如果你的 Flask 應用 app.py 僅用於本地開發提供靜態文件，
        # 並且你打算直接部署 static/ 和 templates/index.html，
        # 那麼安裝 Flask 等依賴可能不是部署到 GitHub Pages 所必需的。
        # GitHub Pages 主要服務靜態內容。

      # 如果你的 app.py 是用來生成靜態文件的 (例如使用 Frozen-Flask)
      # 你需要在此處添加一個步驟來運行它以生成輸出文件夾 (例如 build/)
      # - name: Build static site
      #   run: python app.py build # 假設你有這樣的命令

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Prepare artifact structure for Static JS Version
        run: |
          echo "Preparing artifact structure"
          mkdir -p _site/static
          echo "Copying index_static.html"
          cp index_static.html _site/index.html
          echo "Copying style_static.css"
          cp static/style_static.css _site/static/style_static.css
          echo "Copying script_static.js"
          cp static/script_static.js _site/static/script_static.js
          echo "Touching .nojekyll"
          touch _site/.nojekyll
          echo "Preparation complete"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site' # This is the required path input

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # 如果你在上一步 'Upload artifact' 中指定了特定的 artifact 名稱，
        # 這裡可能需要指定 artifact_name。預設是 'github-pages'。
